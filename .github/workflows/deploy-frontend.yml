name: Build & Deploy Frontend to GCE

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
        
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      - name: Build Docker image
        run: |
          docker build \
            --build-arg VITE_BACKEND_API_URL=${{ secrets.VITE_BACKEND_API_URL }} \
            --build-arg VITE_ENV_MODE=production \
            -t asia-southeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/slj-repo/frontend:${{ github.sha }} .

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker asia-southeast1-docker.pkg.dev --quiet

      - name: Push image to Artifact Registry
        run: |
          docker push asia-southeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/slj-repo/frontend:${{ github.sha }}
          
      - name: Upload docker-compose.yml to GCE VM
        run: |
          gcloud compute scp docker-compose.yml ${{ secrets.GCE_USER }}@${{ secrets.GCE_INSTANCE_NAME }}:/home/${{ secrets.GCE_USER }}/frontend/docker-compose.yml \
            --zone=${{ secrets.GCE_INSTANCE_ZONE }} \
            --quiet
            
      # Step 7: Deploy to GCE VM
      # เชื่อมต่อผ่าน SSH เข้าไปใน GCE VM และรันคำสั่งเพื่อ deploy แอปพลิเคชัน
      - name: Deploy to GCE VM
        run: |
          gcloud compute ssh ${{ secrets.GCE_USER }}@${{ secrets.GCE_INSTANCE_NAME }} \
            --zone=${{ secrets.GCE_INSTANCE_ZONE }} \
            --quiet \
            --command='''
              # --- Script to run on the GCE VM ---

              # 1. Authenticate Docker with Artifact Registry ON THE VM
              # ตั้งค่าให้ Docker บนเครื่อง VM สามารถ pull image จาก Artifact Registry ได้
              # หมายเหตุ: วิธีที่ดีที่สุดคือการผูก Service Account ที่มีสิทธิ์ (Artifact Registry Reader) กับ GCE instance โดยตรง
              echo "Configuring Docker on VM..."
              gcloud auth configure-docker asia-southeast1-docker.pkg.dev --quiet

              # 2. Define Image Name
              # กำหนดตัวแปรชื่อ image พร้อมแท็กใหม่เพื่อง่ายต่อการใช้งาน
              IMAGE_NAME="asia-southeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/slj-repo/frontend:${{ github.sha }}"
              
              # 3. Pull the new Docker image
              # ดึง image เวอร์ชันล่าสุดลงมาที่เครื่อง VM
              echo "Pulling new image: $IMAGE_NAME"
              docker pull $IMAGE_NAME
              
              # 4. Navigate to the application directory
              # เข้าไปที่โฟลเดอร์ของโปรเจกต์ (ต้องมี docker-compose.yml อยู่ที่นี่)
              # คุณต้องสร้างโฟลเดอร์และวางไฟล์ docker-compose.yml เริ่มต้นไว้ก่อน
              APP_DIR="/home/${{ secrets.GCE_USER }}/frontend"
              mkdir -p $APP_DIR
              cd $APP_DIR

              # 5. Create/Update .env.production file
              # เขียนไฟล์ environment variables จาก GitHub Secrets
              # เพื่อให้การตั้งค่าล่าสุดถูกใช้งานเสมอ
              echo "Creating/Updating .env.production..."
              echo "${{ secrets.ENV_PRODUCTION }}" > .env.production
              

              # 6. Update and restart services with Docker Compose
              # สั่งให้ Docker Compose รัน container ใหม่จาก image ที่เพิ่ง pull ลงมา
              # เราจะส่งชื่อ image เข้าไปเป็น environment variable ให้กับ docker-compose
              # ในไฟล์ docker-compose.yml ของคุณ ควรอ้างอิงถึงตัวแปรนี้ เช่น:
              # services:
              #   frontend:
              #     image: ${FRONTEND_IMAGE_TAG}
              echo "Starting Docker Compose..."
              FRONTEND_IMAGE_TAG=$IMAGE_NAME docker-compose -f docker-compose.yml up -d

              # 7. Clean up old, unused Docker images
              # ลบ image เก่าๆ ที่ไม่ได้ใช้งานแล้วออกไปเพื่อประหยัดพื้นที่
              echo "Cleaning up old Docker images..."
              docker image prune -af

              echo "Deployment successful!"
            '''
