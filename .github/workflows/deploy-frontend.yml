name: Build & Deploy Frontend to GCE

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
        
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Build Docker image
        run: |
          docker build -t asia-southeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/slj-repo/frontend:${{ github.sha }} .

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker asia-southeast1-docker.pkg.dev --quiet

      - name: Push image to Artifact Registry
        run: |
          docker push asia-southeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/slj-repo/frontend:${{ github.sha }}

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GCE_SSH_PRIVATE_KEY }}" > ~/.ssh/gce_key
          chmod 600 ~/.ssh/gce_key
          ssh-keyscan -H ${{ secrets.GCE_INSTANCE_NAME }} >> ~/.ssh/known_hosts

      - name: Copy SSH Key to GCE VM # <<<< เพิ่ม Step นี้
        run: |
          gcloud compute scp \
          ~/.ssh/gce_key \ # ต้นทาง: Key ที่สร้างบน Runner
          ${{ secrets.GCE_USER }}@${{ secrets.GCE_INSTANCE_NAME }}:/home/${{ secrets.GCE_USER }}/.ssh/gce_key \ # ปลายทางบน VM
          --zone=${{ secrets.GCE_INSTANCE_ZONE }} # ต้องมี Secret นี้ด้วย
          # ตั้งค่า permissions บน VM หลังจาก copy
          ssh -i ~/.ssh/gce_key ${{ secrets.GCE_USER }}@${{ secrets.GCE_INSTANCE_NAME }} --zone=${{ secrets.GCE_INSTANCE_ZONE }} \
          "chmod 600 /home/${{ secrets.GCE_USER }}/.ssh/gce_key" # ตั้ง chmod ให้ถูกต้องบน VM
      - name: Deploy on GCE VM
        run: |
          ssh -i ~/.ssh/gce_key ${{ secrets.GCE_USER }}@${{ secrets.GCE_INSTANCE_NAME }} << EOF
            # ตรวจสอบว่าโฟลเดอร์ปลายทางมีอยู่หรือไม่
            mkdir -p /home/${{ secrets.GCE_USER }}/frontend
            
            eval "$(ssh-agent -s)" # เริ่ม ssh-agent
            ssh-add /home/${{ secrets.GCE_USER }}/.ssh/gce_key # <<<< เปลี่ยน Path เป็น Key บน VM
            
            # เข้าไปที่โฟลเดอร์หลักของ user เพื่อ git clone/pull
            cd /home/${{ secrets.GCE_USER }}

            # ตรวจสอบว่า Repository ถูกโคลนมาแล้วหรือยัง
            if [ -d "frontend" ]; then
              # ถ้ามีแล้ว ให้เข้าไปในโฟลเดอร์และ git pull
              cd frontend
              git pull
            else
              # ถ้ายังไม่มี ให้ git clone
              git clone git@github.com:yongsin-oak/ERP-Front-SLJ.git frontend
              cd frontend
            fi

            # เขียน .env.production ทับลงไป (จาก Secret)
            cat << EOT > .env.production
            ${{ secrets.ENV_PRODUCTION }}
            EOT

            # สั่ง Docker Compose
            docker compose down # แนะนำให้ใช้ docker compose (ไม่มี hyphen)
            docker pull asia-southeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/slj-repo/frontend:${{ github.sha }}
            docker compose up -d # แนะนำให้ใช้ docker compose (ไม่มี hyphen)
          EOF
